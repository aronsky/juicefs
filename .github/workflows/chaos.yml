name: "chaos-test"

on:
  push:
    branches:
      - release-**
      - main
    paths-ignore:
      - docs/**
  pull_request:
    branches:
      - release-**
      - main
    paths-ignore:
      - docs/**
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: "Run the build with tmate debugging enabled"
        required: false
        default: false
jobs:

  chaos-test:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        chaos: ["minio-io", "minio-memory", "minio-cpu", "minio-bandwidth", "redis-bandwidth", "redis-io", "redis-delay", "redis-memory", "redis-cpu", "juicefs-bandwidth", "juicefs-memory", "juicefs-cpu", "juicefs-delay"]

    steps:        
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Build
        uses: ./.github/actions/build

      - name: Copy
        run: | 
          mkdir app
          cp juicefs app/juicefs

      - name: Creating kind cluster
        uses: helm/kind-action@v1.2.0

      - name: Print cluster information
        run: |
          kubectl config view
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods -n kube-system
          helm version
          kubectl version

      - name: Build CSI Docker Image
        run: |
          docker build -f .github/scripts/chaos/juicefs-csi-driver.Dockerfile -t juicedata/juicefs-csi-driver:v0.17.3 .
          
      - name: Load CSI Docker Image
        run: | 
          kind load docker-image juicedata/juicefs-csi-driver:v0.17.3 --name chart-testing

      - name: Install JuiceFS CSI Driver
        run: |
          helm repo add juicefs https://juicedata.github.io/charts/
          helm repo update
          helm install juicefs-csi-driver juicefs/juicefs-csi-driver -n kube-system 
          kubectl -n kube-system get pods -l app.kubernetes.io/name=juicefs-csi-driver

      - name: Deploy redis
        run: |
          kubectl apply -f .github/scripts/chaos/redis.yaml

      - name: Deploy minio
        run: |
          kubectl apply -f .github/scripts/chaos/minio.yaml

      - name: Mount Juicefs 
        run: | 
          kubectl apply -f .github/scripts/chaos/sc.yaml
          kubectl apply -f .github/scripts/chaos/pvc.yaml

      - name: Start vdbenh
        run: |
          kubectl apply -f .github/scripts/chaos/dynamic.yaml

      - name: Get Config Base64
        run: | 
          chaos=${{matrix.chaos}}
          sed -i "s/# - $chaos/- $chaos/g" .github/scripts/chaos/workflow.yaml 
          cat .github/scripts/chaos/workflow.yaml 
          base64=$(base64  .github/scripts/chaos/workflow.yaml  | xargs | sed -e 's: ::g' )
          echo "base64 is $base64"
          echo "workflow_base64=$base64" >> $GITHUB_ENV

      - name: Run chaos mesh action
        uses: chaos-mesh/chaos-mesh-action@master
        env:
          CHAOS_MESH_VERSION: v2.5.0
          CFG_BASE64: ${{env.workflow_base64}}

      - name: Verify
        run: |
          sleep 120
          kubectl get pods --all-namespaces | grep dynamic-ce | grep Running
          kubectl get pods --all-namespaces | grep juicefs-csi-node | grep Running
          kubectl get pods --all-namespaces | grep juicefs-csi-controller | grep Running
          kubectl get pods --all-namespaces | grep juicefs-chart-testing-control-plane-pvc | grep Running
          kubectl get pods --all-namespaces | grep redis | grep Running
          kubectl get pods --all-namespaces | grep minio | grep Running

          MOUNT_POD_NAME=$(kubectl get pods -n kube-system -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'  | grep juicefs-chart-testing-control-plane-pvc)
          echo MOUNT_POD_NAME is $MOUNT_POD_NAME
          kubectl logs -n kube-system $MOUNT_POD_NAME > juicefs.log
          grep "<FATAL>:" juicefs.log && exit 1 || true
          VDBENCH_POD_NAME=$(kubectl get pods -n default -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'  | grep dynamic-ce )
          echo VDBENCH_POD_NAME is $VDBENCH_POD_NAME
          kubectl logs -n default $VDBENCH_POD_NAME > vdbench.log
          grep -i "error" vdbench.log && exit 1 || true

      - name: Send Slack Notification
        if: ${{ failure() && github.event_name == 'pull_request'}}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"          

      - name: Setup upterm session
        if: ${{ failure() }}
        timeout-minutes: 120
        uses: lhotari/action-upterm@v1
